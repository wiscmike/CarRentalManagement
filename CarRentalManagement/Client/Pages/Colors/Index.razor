@page "/colors/"
@inject HttpClient _httpClient
@inject IJSRuntime _js
@attribute [Authorize]

<style>
    .color {
        font-weight: bold;
        color: #2751d8;
        align-self: center;
    }

    h3 {
        font-weight: bold;
        font-size: 35px;
        color: #2a40ee
    }
</style>

<IndexPageHeader PageLink="/colors/create" ButtonText="Create New Color" Title="Car Colors" />

@if (Colors == null)
{
    <div class="alert alert-info" Loading Colors...></div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Name</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var color in Colors)
            {
                <tr>
                    <td class="color">@color.Name</td>
                    <td>
                        <a href="colors/view/@color.Id" class="btn btn-primary" title="View selected color">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="colors/edit/@color.Id" class="btn btn-warning" title="Edit selected color">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(color.Id))" title="Delete selected color">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Color> Colors;

    protected async override Task OnInitializedAsync()
    {
        Colors = await _httpClient.GetFromJsonAsync<List<Color>>(EndPoints.ColorsEndPoint);
    }

    private async Task Delete(int colorId)
    {
        var color = Colors.FirstOrDefault(m => m.Id == colorId);

        if (color != null)
        {
            var confirm = await _js.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {color.Name}?");
            if (confirm)
            {
                await _httpClient.DeleteAsync($"{EndPoints.ColorsEndPoint}/{colorId}");
                await OnInitializedAsync();
            }
        }
    }
}
